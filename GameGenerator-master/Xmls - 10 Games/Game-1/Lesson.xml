<Lesson>
    <LessonScreens>
      <LessonScreen>
        <Buttons>
          <Button>
            <ButtonLocationType>NEXT</ButtonLocationType>
            <Text>Continue</Text>
            <Timer></Timer>
            <TransitionType>NEXT_SCREEN</TransitionType>
          </Button>
        </Buttons>
        <Characters>
          <Character>
            <CharacterType>Alt</CharacterType>
            <Timer></Timer>
          </Character>
        </Characters>
        <InformationBoxes>
          <InformationBox>
            <Text>Hey Gooble users welcome to the class</Text>
            <TextType>ALT1</TextType>
            <Timer></Timer>
          </InformationBox>
        </InformationBoxes>
      </LessonScreen>
<LessonScreen>
        <Buttons>
          <Button>
            <ButtonLocationType>NEXT</ButtonLocationType>
            <Text>Continue</Text>
            <Timer></Timer>
            <TransitionType>NEXT_SCREEN</TransitionType>
          </Button>
        </Buttons>
        <Characters>
          <Character>
            <CharacterType>Alt</CharacterType>
            <Timer></Timer>
          </Character>
        </Characters>
        <InformationBoxes>
          <InformationBox>
            <Text>Software engineering overview Requirements
			Design
			Construction
			Testing
			Project management
			Development methodologies overview
			The Waterfall development process
			Heavyweight methodologies
			Agile methodologies and XP
		</Text>
            <TextType>ALT1</TextType>
            <Timer></Timer>
          </InformationBox>
        </InformationBoxes>
      </LessonScreen>
<LessonScreen>
        <Buttons>
          <Button>
            <ButtonLocationType>NEXT</ButtonLocationType>
            <Text>Continue</Text>
            <Timer></Timer>
            <TransitionType>NEXT_SCREEN</TransitionType>
          </Button>
        </Buttons>
        <Characters>
          <Character>
            <CharacterType>Alt</CharacterType>
            <Timer></Timer>
          </Character>
        </Characters>
        <InformationBoxes>
          <InformationBox>
            <Text>Software engineering is:
	An engineering discipline that provides knowledge, tools, and methods for:
	Defining software requirements
	Performing software design
	Software construction
	Software testing
	Software maintenance tasks
	Software project management
		</Text>
            <TextType>ALT1</TextType>
            <Timer></Timer>
          </InformationBox>
        </InformationBoxes>
      </LessonScreen>
<LessonScreen>
        <Buttons>
          <Button>
            <ButtonLocationType>NEXT</ButtonLocationType>
            <Text>Continue</Text>
            <Timer></Timer>
            <TransitionType>NEXT_SCREEN</TransitionType>
          </Button>
        </Buttons>
        <Characters>
          <Character>
            <CharacterType>Alt</CharacterType>
            <Timer></Timer>
          </Character>
        </Characters>
        <InformationBoxes>
          <InformationBox>
            <Text>Software engineering is:
	Software requirements define the functionality of the system
	Answer the question "what?", not "how?"
	Define constraints on the system
	Two kinds of requirements
	Functional requirements
	Non-functional requirements
		</Text>
            <TextType>ALT1</TextType>
            <Timer></Timer>
          </InformationBox>
        </InformationBoxes>
      </LessonScreen>
<LessonScreen>
        <Buttons>
          <Button>
            <ButtonLocationType>NEXT</ButtonLocationType>
            <Text>Continue</Text>
            <Timer></Timer>
            <TransitionType>NEXT_SCREEN</TransitionType>
          </Button>
        </Buttons>
        <Characters>
          <Character>
            <CharacterType>Alt</CharacterType>
            <Timer></Timer>
          </Character>
        </Characters>
        <InformationBoxes>
          <InformationBox>
            <Text>The Software Requirements Specification (SRS) is a formal requirements 	document
	It describes in details:
	Functional requirements
	Business processes
	Actors and use-cases
	Non-functional requirements
	E.g. performance, scalability, etc
		</Text>
            <TextType>ALT1</TextType>
            <Timer></Timer>
          </InformationBox>
        </InformationBoxes>
      </LessonScreen>
<LessonScreen>
        <Buttons>
          <Button>
            <ButtonLocationType>NEXT</ButtonLocationType>
            <Text>Continue</Text>
            <Timer></Timer>
            <TransitionType>NEXT_SCREEN</TransitionType>
          </Button>
        </Buttons>
        <Characters>
          <Character>
            <CharacterType>Alt</CharacterType>
            <Timer></Timer>
          </Character>
        </Characters>
        <InformationBoxes>
          <InformationBox>
            <Text>It is always hard to describe and document the requirements in 		comprehensive and not ambiguous way
	Good requirements save time and money
	Requirements always change during the project!
	Good software requirements specification reduces the changes
	Prototypes significantly reduce changes
		</Text>
            <TextType>ALT1</TextType>
            <Timer></Timer>
          </InformationBox>
        </InformationBoxes>
      </LessonScreen>
<LessonScreen>
        <Buttons>
          <Button>
            <ButtonLocationType>NEXT</ButtonLocationType>
            <Text>Continue</Text>
            <Timer></Timer>
            <TransitionType>NEXT_SCREEN</TransitionType>
          </Button>
        </Buttons>
        <Characters>
          <Character>
            <CharacterType>Alt</CharacterType>
            <Timer></Timer>
          </Character>
        </Characters>
        <InformationBoxes>
          <InformationBox>
            <Text>Software design is a technical description about how the system will 		implement the requirements
	The system architecture describes:
	How the system will be decomposed into subsystems (modules)
	Responsibilities of each module
	Interaction between modules
	Platforms and technologies
		</Text>
            <TextType>ALT1</TextType>
            <Timer></Timer>
          </InformationBox>
        </InformationBoxes>
      </LessonScreen>
<LessonScreen>
        <Buttons>
          <Button>
            <ButtonLocationType>NEXT</ButtonLocationType>
            <Text>Continue</Text>
            <Timer></Timer>
            <TransitionType>NEXT_SCREEN</TransitionType>
          </Button>
        </Buttons>
        <Characters>
          <Character>
            <CharacterType>Alt</CharacterType>
            <Timer></Timer>
          </Character>
        </Characters>
        <InformationBoxes>
          <InformationBox>
            <Text>Detailed Design
	Describes the internal module structure
	Interfaces, data design, process design
	Object-Oriented Design
	Describes the classes, their responsibilities, relationships, dependencies, and 	interactions
	Internal Class Design
	Methods, responsibilities, algorithms and interactions between them
		</Text>
            <TextType>ALT1</TextType>
            <Timer></Timer>
          </InformationBox>
        </InformationBoxes>
      </LessonScreen>
<LessonScreen>
        <Buttons>
          <Button>
            <ButtonLocationType>NEXT</ButtonLocationType>
            <Text>Continue</Text>
            <Timer></Timer>
            <TransitionType>NEXT_SCREEN</TransitionType>
          </Button>
        </Buttons>
        <Characters>
          <Character>
            <CharacterType>Alt</CharacterType>
            <Timer></Timer>
          </Character>
        </Characters>
        <InformationBoxes>
          <InformationBox>
            <Text>The Software Design Document (SDD) is a formal description of the architecture and design of the system
	It contains:
	Architecture design
	Modules and their interaction (diagram)
	For each module
	Process design (diagrams)
	Data design (E/R diagram)
	Interfaces design (class diagram)
		</Text>
            <TextType>ALT1</TextType>
            <Timer></Timer>
          </InformationBox>
        </InformationBoxes>
      </LessonScreen>
<LessonScreen>
        <Buttons>
          <Button>
            <ButtonLocationType>NEXT</ButtonLocationType>
            <Text>Continue</Text>
            <Timer></Timer>
            <TransitionType>NEXT_SCREEN</TransitionType>
          </Button>
        </Buttons>
        <Characters>
          <Character>
            <CharacterType>Alt</CharacterType>
            <Timer></Timer>
          </Character>
        </Characters>
        <InformationBoxes>
          <InformationBox>
            <Text>During the software construction phase developers create the software
	Sometimes called implementation phase
	It includes:
	Internal method design
	Writing code
	Writing unit tests (sometimes)
	Testing and debugging
	Integration
		</Text>
            <TextType>ALT1</TextType>
            <Timer></Timer>
          </InformationBox>
        </InformationBoxes>
      </LessonScreen>
<LessonScreen>
        <Buttons>
          <Button>
            <ButtonLocationType>NEXT</ButtonLocationType>
            <Text>Continue</Text>
            <Timer></Timer>
            <TransitionType>NEXT_SCREEN</TransitionType>
          </Button>
        </Buttons>
        <Characters>
          <Character>
            <CharacterType>Alt</CharacterType>
            <Timer></Timer>
          </Character>
        </Characters>
        <InformationBoxes>
          <InformationBox>
            <Text>Testing checks whether the developed software conforms to the requirements
	Aims to identify defects (bugs)
	Developers test the code after write it
	At least run it to see the results
	Unit testing is even better
	Units tests can be repeated many times
	System testing is done by QA engineers
	Unit testing is done by developers
		</Text>
            <TextType>ALT1</TextType>
            <Timer></Timer>
          </InformationBox>
        </InformationBoxes>
      </LessonScreen>
<LessonScreen>
        <Buttons>
          <Button>
            <ButtonLocationType>NEXT</ButtonLocationType>
            <Text>Continue</Text>
            <Timer></Timer>
            <TransitionType>NEXT_SCREEN</TransitionType>
          </Button>
        </Buttons>
        <Characters>
          <Character>
            <CharacterType>Alt</CharacterType>
            <Timer></Timer>
          </Character>
        </Characters>
        <InformationBoxes>
          <InformationBox>
            <Text>Debugging aims to find the source of already identified defect and to 	fix it
	Performed by developers
	Steps in debugging:
	Find the defect in the code
	Identify the source of the problem
	Identify the exact place in code causing it
	Fix the defect
	Test to check if the fix is correct
		</Text>
            <TextType>ALT1</TextType>
            <Timer></Timer>
          </InformationBox>
        </InformationBoxes>
      </LessonScreen>
<LessonScreen>
        <Buttons>
          <Button>
            <ButtonLocationType>NEXT</ButtonLocationType>
            <Text>Continue</Text>
            <Timer></Timer>
            <TransitionType>NEXT_SCREEN</TransitionType>
          </Button>
        </Buttons>
        <Characters>
          <Character>
            <CharacterType>Alt</CharacterType>
            <Timer></Timer>
          </Character>
        </Characters>
        <InformationBoxes>
          <InformationBox>
            <Text>What is software verification?
	It checks whether the developed software conforms to the requirements
	Performed by the Software Quality Assurance Engineers (QA)
	Two approaches:
	Formal reviews and inspections
	Different kinds of testing
	Cannot certify absence of defects!
	Can only decrease their rates
		</Text>
            <TextType>ALT1</TextType>
            <Timer></Timer>
          </InformationBox>
        </InformationBoxes>
      </LessonScreen>
<LessonScreen>
        <Buttons>
          <Button>
            <ButtonLocationType>NEXT</ButtonLocationType>
            <Text>Continue</Text>
            <Timer></Timer>
            <TransitionType>NEXT_SCREEN</TransitionType>
          </Button>
        </Buttons>
        <Characters>
          <Character>
            <CharacterType>Alt</CharacterType>
            <Timer></Timer>
          </Character>
        </Characters>
        <InformationBoxes>
          <InformationBox>
            <Text>Testing checks whether the developed software conforms to the requirements
	Testing aims to find defects (bugs)
	Black-box and white-box tests
	Unit tests, integration tests, system tests, acceptance tests
	Stress tests, load tests, regression tests
	Tester engineers can use automated test tools to record and execute tests
		</Text>
            <TextType>ALT1</TextType>
            <Timer></Timer>
          </InformationBox>
        </InformationBoxes>
      </LessonScreen>
<LessonScreen>
        <Buttons>
          <Button>
            <ButtonLocationType>NEXT</ButtonLocationType>
            <Text>Continue</Text>
            <Timer></Timer>
            <TransitionType>NEXT_SCREEN</TransitionType>
          </Button>
        </Buttons>
        <Characters>
          <Character>
            <CharacterType>Alt</CharacterType>
            <Timer></Timer>
          </Character>
        </Characters>
        <InformationBoxes>
          <InformationBox>
            <Text>Test planning
	Establish test strategy and test plan
	During requirements and design phases
	Test development
	Test procedures, test scenarios, test cases, test scripts
	Test execution
	Test reporting
	Retesting the defects
		</Text>
            <TextType>ALT1</TextType>
            <Timer></Timer>
          </InformationBox>
        </InformationBoxes>
      </LessonScreen>
<LessonScreen>
        <Buttons>
          <Button>
            <ButtonLocationType>NEXT</ButtonLocationType>
            <Text>Continue</Text>
            <Timer></Timer>
            <TransitionType>NEXT_SCREEN</TransitionType>
          </Button>
        </Buttons>
        <Characters>
          <Character>
            <CharacterType>Alt</CharacterType>
            <Timer></Timer>
          </Character>
        </Characters>
        <InformationBoxes>
          <InformationBox>
            <Text>The "Waterfall" Process
	Old-fashioned, not used today
	Rational Unified Process (RUP)
	Very formal, lots of documentation
	Microsoft Solutions Framework (MSF)
	Formal heavyweight approach
	Agile Development Processes
	E.g. Extreme Programming
		</Text>
            <TextType>ALT1</TextType>
            <Timer></Timer>
          </InformationBox>
        </InformationBoxes>
      </LessonScreen>
    </LessonScreens>
</Lesson>